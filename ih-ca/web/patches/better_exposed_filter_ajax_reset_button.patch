diff --git a/src/Plugin/views/exposed_form/BetterExposedFilters.php b/src/Plugin/views/exposed_form/BetterExposedFilters.php
index bde76e1d..87ca013a 100644
--- a/src/Plugin/views/exposed_form/BetterExposedFilters.php
+++ b/src/Plugin/views/exposed_form/BetterExposedFilters.php
@@ -3,6 +3,7 @@
 namespace Drupal\better_exposed_filters\Plugin\views\exposed_form;
 
 use Drupal\better_exposed_filters\Plugin\BetterExposedFiltersWidgetManager;
+use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormStateInterface;
@@ -11,6 +12,7 @@
 use Drupal\Core\Url;
 use Drupal\views\Plugin\views\exposed_form\InputRequired;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Symfony\Component\HttpFoundation\Request;
 
 /**
  * Exposed form plugin that provides a basic exposed form.
@@ -53,6 +55,14 @@ class BetterExposedFilters extends InputRequired {
    */
   protected $moduleHandler;
 
+  /**
+   * The current Request object.
+   *
+   * @var \Symfony\Component\HttpFoundation\Request
+   */
+  protected $request;
+
+
   /**
    * BetterExposedFilters constructor.
    *
@@ -70,13 +80,25 @@ class BetterExposedFilters extends InputRequired {
    *   The better exposed filter widget manager for sort widgets.
    * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
    *   Manage drupal modules.
+   * @param \Symfony\Component\HttpFoundation\Request $request
+   *   The current request.
    */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, BetterExposedFiltersWidgetManager $filter_widget_manager, BetterExposedFiltersWidgetManager $pager_widget_manager, BetterExposedFiltersWidgetManager $sort_widget_manager, ModuleHandlerInterface $module_handler) {
+  public function __construct(
+    array $configuration,
+    $plugin_id,
+    $plugin_definition,
+    BetterExposedFiltersWidgetManager $filter_widget_manager,
+    BetterExposedFiltersWidgetManager $pager_widget_manager,
+    BetterExposedFiltersWidgetManager $sort_widget_manager,
+    ModuleHandlerInterface $module_handler,
+    Request $request
+  ) {
     parent::__construct($configuration, $plugin_id, $plugin_definition);
     $this->filterWidgetManager = $filter_widget_manager;
     $this->pagerWidgetManager = $pager_widget_manager;
     $this->sortWidgetManager = $sort_widget_manager;
     $this->moduleHandler = $module_handler;
+    $this->request = $request;
   }
 
   /**
@@ -90,7 +112,8 @@ public static function create(ContainerInterface $container, array $configuratio
       $container->get('plugin.manager.better_exposed_filters_filter_widget'),
       $container->get('plugin.manager.better_exposed_filters_pager_widget'),
       $container->get('plugin.manager.better_exposed_filters_sort_widget'),
-      $container->get('module_handler')
+      $container->get('module_handler'),
+      $container->get('request_stack')->getCurrentRequest()
     );
   }
 
@@ -820,10 +843,21 @@ public function exposedFormAlter(&$form, FormStateInterface $form_state) {
     $has_visible_filters = !empty(Element::getVisibleChildren($form)) ?: FALSE;
     $form['actions']['submit']['#access'] = $has_visible_filters;
     // Never enable a reset button that has already been disabled.
-    if (!isset($form['actions']['reset']['#access']) || $form['actions']['reset']['#access'] === TRUE) {
+    if (isset($form['actions']['reset'])
+      && (!isset($form['actions']['reset']['#access']) || $form['actions']['reset']['#access'] === TRUE)
+    ) {
       $form['actions']['reset']['#access'] = $has_visible_filters;
     }
 
+    if (isset($form['actions']['reset'])) {
+      // Prevent from showing up in \Drupal::request()->query.
+      // See ViewsExposedForm::buildForm() for more details.
+      $form['actions']['reset']['#name'] = 'reset';
+      $form['actions']['reset']['#op'] = 'reset';
+      $form['actions']['reset']['#type'] = 'submit';
+      $form['actions']['reset']['#id'] = Html::getUniqueId('edit-reset-' . $this->view->storage->id());
+    }
+
     // Ensure default process/pre_render callbacks are included when a BEF
     // widget has added their own.
     foreach (Element::children($form) as $key) {
@@ -915,4 +949,97 @@ protected function addDefaultElementInfo(array &$element) {
     }
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exposedFormSubmit(&$form, FormStateInterface $form_state, &$exclude) {
+    parent::exposedFormSubmit($form, $form_state, $exclude);
+
+    $triggering_element = $form_state->getTriggeringElement();
+    if ($triggering_element && !empty($triggering_element['#name']) && $triggering_element['#name'] == 'reset') {
+      $this->resetForm($form, $form_state);
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function resetForm(&$form, FormStateInterface $form_state) {
+    // _SESSION is not defined for users who are not logged in.
+
+    // If filters are not overridden, store the 'remember' settings on the
+    // default display. If they are, store them on this display. This way,
+    // multiple displays in the same view can share the same filters and
+    // remember settings.
+    $display_id = ($this->view->display_handler->isDefaulted('filters')) ? 'default' : $this->view->current_display;
+
+    if (isset($_SESSION['views'][$this->view->storage->id()][$display_id])) {
+      unset($_SESSION['views'][$this->view->storage->id()][$display_id]);
+    }
+
+    // Set the form to allow redirect.
+    if (empty($this->view->live_preview) && !$this->request->isXmlHttpRequest()) {
+      $form_state->disableRedirect(FALSE);
+    }
+    else {
+      $form_state->setRebuild();
+      $this->view->setExposedInput([]);
+
+      // Go through each handler and let it generate its exposed widget.
+      // See ViewsExposedForm::buildForm() for more details.
+      foreach ($this->view->display_handler->handlers as $type => $value) {
+        /** @var \Drupal\views\Plugin\views\ViewsHandlerInterface $handler */
+        foreach ($this->view->$type as $id => $handler) {
+          if ($handler->canExpose() && $handler->isExposed()) {
+            // Reset exposed sorts filter elements if they exist.
+            if ($type === 'sort') {
+              foreach (['sort_bef_combine', 'sort_by', 'sort_order'] as $sort_el) {
+                if (!empty($form[$sort_el])) {
+                  $this->request->query->remove($sort_el);
+                  $form_state->setValue($sort_el, NULL);
+                }
+              }
+              continue 2;
+            }
+
+            $handler->value = $handler->options['value'];
+
+            // Grouped exposed filters have their own forms.
+            // Instead of render the standard exposed form, a new Select or
+            // Radio form field is rendered with the available groups.
+            // When an user choose an option the selected value is split
+            // into the operator and value that the item represents.
+            if ($handler->isAGroup()) {
+              $handler->groupForm($form, $form_state);
+              $id = $value_identifier = $handler->options['group_info']['identifier'];
+            }
+            else {
+              $handler->buildExposedForm($form, $form_state);
+              $value_identifier = $handler->options['expose']['identifier'];
+            }
+            if ($info = $handler->exposedInfo()) {
+              $form['#info']["$type-$id"] = $info;
+            }
+
+            // Checks if this is a complex value.
+            if (isset($form[$value_identifier]) && Element::children($form[$value_identifier])) {
+              foreach (Element::children($form[$value_identifier]) as $child) {
+                $form_state->setValue([$value_identifier, $child], $form[$value_identifier][$child]['#default_value'] ?? NULL);
+              }
+            }
+            else {
+              $form_state->setValue($value_identifier, $form[$value_identifier]['#default_value'] ?? NULL);
+            }
+
+            // Cleanup query.
+           $this->request->query->remove($value_identifier);
+          }
+        }
+      }
+      $this->view->exposed_data = $form_state->getValues();
+    }
+
+    $form_state->setRedirect('<current>');
+  }
+
 }
